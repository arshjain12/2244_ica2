pipeline {
    agent any
    environment {
        // Define dynamic port allocation if needed
        APP_PORT = '8081' // You can also use environment variables to select another port dynamically
    }
    stages {
        stage('Cleanup') {
            steps {
                cleanWs() // Clean workspace before starting
            }
        }

        stage('Clone Git Repo') {
            steps {
                checkout scm
            }
        }

        stage('Build image') {
            steps {
                sh 'docker build -t mywebsite .'
                script {
                    // Check if the port is already in use, handle conflicts
                    try {
                        // Attempt to run the container
                        sh "docker run -d -p ${APP_PORT}:80 mywebsite"
                    } catch (Exception e) {
                        // If port is already in use, stop and remove the existing container and try again
                        echo 'Port conflict detected, handling cleanup...'
                        sh """
                            CONTAINER_ID=\$(docker ps -q -f "ancestor=mywebsite")
                            if [ -n "\$CONTAINER_ID" ]; then
                                docker stop \$CONTAINER_ID
                                docker rm \$CONTAINER_ID
                            fi
                        """
                     

